# N8N Trino Connector Configuration
# 配置文件用于连接N8N服务器并提供webhook功能

# ===== 必需配置 =====
# Connector名称 - 必须设置为 "n8n"
connector.name=n8n

# ===== N8N服务器配置 =====
# N8N服务器基础URL（用于webhook调用）
# 默认值: http://localhost:5678
n8n.base-url=http://localhost:5678

# N8N管理API基础URL（用于获取工作流信息）
# 默认值: http://localhost:5678/api/v1
n8n.api-base-url=http://localhost:5678/api/v1

# ===== API认证配置 =====
# N8N API Key（可选，用于访问管理API）
# 如果不设置，将只能使用基础webhook功能
# 设置后可以动态发现所有webhook作为表
# n8n.api-key=your-api-key-here

# ===== 性能配置 =====
# HTTP请求超时时间
# 支持格式: 30s, 1m, 2m30s 等
# 范围: 1s - 10m
# 默认值: 30s
n8n.timeout=30s

# API响应缓存持续时间
# 支持格式: 5m, 10m, 1h 等
# 范围: 30s - 1h
# 默认值: 5m
n8n.cache-duration=5m

# ===== 使用说明 =====
# 1. 基础模式（无API Key）:
#    - 提供默认的webhook表
#    - 可以使用UDF函数调用webhook
#
# 2. 高级模式（有API Key）:
#    - 自动发现所有激活的webhook作为表
#    - 支持SQL查询webhook信息
#    - 动态表结构
#
# 示例SQL查询:
# SHOW TABLES FROM n8n.default;
# SELECT * FROM n8n.default.your_webhook_table;
# SELECT n8n_webhook_send_json('/webhook/test', '{"data": "value"}');

# ============================================================================
# 环境配置示例
# ============================================================================

# 开发环境配置:
#connector.name=n8n
#n8n.base-url=http://localhost:5678
#n8n.api-base-url=http://localhost:5678/api/v1
#n8n.api-key=your-dev-api-key
#n8n.timeout=10s
#n8n.cache-duration=1m

# 测试环境配置:
#connector.name=n8n
#n8n.base-url=https://n8n-test.company.com
#n8n.api-base-url=https://n8n-test.company.com/api/v1
#n8n.api-key=your-test-api-key
#n8n.timeout=30s
#n8n.cache-duration=5m

# 生产环境配置:
#connector.name=n8n
#n8n.base-url=https://n8n.company.com
#n8n.api-base-url=https://n8n.company.com/api/v1
#n8n.api-key=your-prod-api-key
#n8n.timeout=60s
#n8n.cache-duration=10m

# ============================================================================
# SQL使用示例
# ============================================================================

# 发现所有webhook表:
# SHOW TABLES FROM n8n.default;

# 查询特定webhook数据:
# SELECT * FROM n8n.default.user_registration_webhook;

# 查看webhook元信息:
# SELECT webhook_path, method, workflow_name, is_active 
# FROM n8n.default.order_processing_webhook;

# 使用UDF函数:
# SELECT n8n_webhook_send_json('/webhook/test', '{"message": "hello"}');

# 联合查询多个webhook:
# SELECT u.workflow_name, o.status_code 
# FROM n8n.default.user_webhook u
# JOIN n8n.default.order_webhook o ON u.workflow_id = o.workflow_id;

# ============================================================================
# 表结构说明
# ============================================================================

# 每个webhook表包含以下列:
# - webhook_path: webhook路径
# - method: HTTP方法 (GET/POST)
# - workflow_name: 工作流名称
# - workflow_id: 工作流ID
# - is_active: 是否激活
# - response_data: webhook响应数据 (JSON格式)
# - status_code: HTTP状态码
# - timestamp: 调用时间戳

# ============================================================================
# 安全和性能建议
# ============================================================================

# 1. 生产环境建议使用HTTPS
# 2. 妥善保管API Key，避免泄露
# 3. 根据实际需求调整缓存时间
# 4. 监控webhook调用频率，避免过度请求
# 5. 定期检查和更新API Key

# ============================================================================
# 故障排除
# ============================================================================

# 如果遇到问题:
# 1. 检查N8N服务是否正常运行
# 2. 验证API Key是否有效
# 3. 确认网络连接和防火墙设置
# 4. 查看Trino日志获取详细错误信息
# 5. 尝试不使用API Key的基础模式 